---
import { Icon } from "astro-icon/components";
import { profileConfig } from "../../config";
import { url } from "../../utils/url-utils";
import ImageWrapper from "../misc/ImageWrapper.astro";

const config = profileConfig;
---
<div class="card-base p-3">
    <a aria-label="Go to About Page" href={url('/about/')}
       class="group block relative mx-auto mt-1 lg:mx-0 lg:mt-0 mb-3
       max-w-[12rem] lg:max-w-none overflow-hidden rounded-xl active:scale-95">
        <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50
        w-full h-full z-50 flex items-center justify-center">
            <Icon name="fa6-regular:address-card"
                  class="transition opacity-0 scale-90 group-hover:scale-100 group-hover:opacity-100 text-white text-5xl">
            </Icon>
        </div>
        <ImageWrapper src={config.avatar || ""} alt="Profile Image of the Author" class="mx-auto lg:w-full h-full lg:mt-0 "></ImageWrapper>
    </a>
    <div class="px-2">
        <div class="font-bold text-3xl text-center mb-1 dark:text-neutral-50 transition">{config.name}</div>
        <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
        <div class="text-center text-neutral-400 mb-2.5 transition">{config.bio}</div>
        <div class="flex gap-2 justify-center mb-1">
            {config.links.length > 1 && config.links.map(item =>
                    <a rel="me" aria-label={item.name} href={item.url} target="_blank"
                       class="btn-regular rounded-lg h-10 w-10 active:scale-90 transition-transform duration-200 hover:scale-125 group">
                        <Icon name={item.icon} class="text-[1.5rem] transition-transform duration-300 group-hover:rotate-[360deg]"></Icon>
                    </a>
            )}
            {config.links.length == 1 && <a rel="me" aria-label={config.links[0].name} href={config.links[0].url} target="_blank"
                                            class="btn-regular rounded-lg h-10 gap-2 px-3 font-bold active:scale-95">
                <Icon name={config.links[0].icon} class="text-[1.5rem]"></Icon>
                {config.links[0].name}
            </a>}
        </div>
        <!-- Nút phát nhạc và audio ẩn dưới tiểu sử -->
        <div class="mt-3 flex justify-center items-center gap-2">
          <button id="music-play-btn" class="rounded-full p-2 bg-gradient-to-tr from-primary to-blue-400 shadow-xl border-2 border-white ring-2 ring-blue-200 hover:scale-110 hover:shadow-xl transition-transform duration-200 focus:outline-none focus:ring-4 focus:ring-blue-300" title="Phát nhạc">
            <Icon id="music-icon" name="fa6-solid:play" class="text-lg text-white transition-transform duration-500 drop-shadow-lg" />
          </button>
          <audio id="profile-music" preload="auto"></audio>
        </div>
    </div>
</div>

<script is:inline>
  // Tạo sớm API toàn cục nếu chưa tồn tại
  if (!window.musicPlayer) {
    // Tạo ID duy nhất cho tab hiện tại - chỉ tồn tại trong tab này
    const tabId = 'tab-' + Date.now() + '-' + Math.random().toString(36).substring(2, 9);
    sessionStorage.setItem('current-tab-id', tabId);
    
    // Danh sách nhạc mp3
    const songs = [
      { src: "/assets/music/song1.mp3"},
      { src: "/assets/music/song2.mp3"},
      { src: "/assets/music/song3.mp3"},
      { src: "/assets/music/song4.mp3"},
      { src: "/assets/music/song5.mp3"},
      { src: "/assets/music/song6.mp3"},
      { src: "/assets/music/song7.mp3"},
      { src: "/assets/music/song8.mp3"},
      { src: "/assets/music/song9.mp3"},
      { src: "/assets/music/song10.mp3"},
      { src: "/assets/music/song11.mp3"},
      { src: "/assets/music/song12.mp3"},
      { src: "/assets/music/song13.mp3"},
      { src: "/assets/music/song14.mp3"},
      { src: "/assets/music/song15.mp3"},
      { src: "/assets/music/song16.mp3"},
      { src: "/assets/music/song17.mp3"},
      { src: "/assets/music/song18.mp3"},
      { src: "/assets/music/song19.mp3"},
      { src: "/assets/music/song20.mp3"},
      { src: "/assets/music/song21.mp3"},
      { src: "/assets/music/song22.mp3"},
      { src: "/assets/music/song23.mp3"},
      { src: "/assets/music/song24.mp3"},
      { src: "/assets/music/song25.mp3"},
      { src: "/assets/music/song26.mp3"},
      { src: "/assets/music/song27.mp3"},
      { src: "/assets/music/song28.mp3"},
      { src: "/assets/music/song29.mp3"},
      { src: "/assets/music/song30.mp3"},
      { src: "/assets/music/song31.mp3"},
      { src: "/assets/music/song32.mp3"},
      { src: "/assets/music/song33.mp3"},
      { src: "/assets/music/song34.mp3"}
    ];
  
    // Tạo API quản lý nhạc toàn cục
    window.musicPlayer = {
      audioElement: new Audio(),
      isPlaying: false,
      currentIndex: 0,
      songs: songs,
      tabId: tabId,
      swupEnabled: false,
      
      // Chọn bài hát ngẫu nhiên
      getRandomSong: function() {
        return Math.floor(Math.random() * this.songs.length);
      },
      
      // Kiểm tra xem trang có đang được reload không
      isPageReload: function() {
        return window.performance && 
          (window.performance.navigation && window.performance.navigation.type === 1 ||
           (window.performance.getEntriesByType && 
            window.performance.getEntriesByType('navigation')[0]?.type === 'reload'));
      },
      
      // Kiểm tra xem đây có phải là lần đầu truy cập không
      isFirstVisit: function() {
        return !localStorage.getItem('music-visited');
      },
      
      // Quản lý trạng thái khi vào trang lần đầu
      handleFirstVisit: function() {
        this.currentIndex = this.getRandomSong();
        this.isPlaying = true;
        localStorage.setItem('music-visited', 'true');
      },
      
      // Quản lý trạng thái khi reload trang
      handlePageReload: function() {
        const isCurrentlyPlaying = localStorage.getItem('music-is-playing') === 'true';
        
        if (isCurrentlyPlaying) {
          // Nếu đang phát: luôn random bài mới
          this.currentIndex = this.getRandomSong();
          this.isPlaying = true;
        } else {
          // Nếu đang dừng: giữ nguyên bài hiện tại
          const savedIndex = localStorage.getItem('music-index');
          this.currentIndex = savedIndex ? parseInt(savedIndex) : this.getRandomSong();
          this.isPlaying = false;
        }
      },
      
      // Quản lý trạng thái khi chuyển trang
      handlePageNavigation: function() {
        const savedState = sessionStorage.getItem('music-state');
        if (savedState) {
          try {
            const state = JSON.parse(savedState);
            this.currentIndex = state.index;
            this.isPlaying = state.isPlaying;
          } catch (e) {
            console.error('Lỗi khi khôi phục trạng thái nhạc:', e);
            this.currentIndex = this.getRandomSong();
          }
        } else {
          // Tab mới mở: chọn bài ngẫu nhiên và tự động phát
          this.currentIndex = this.getRandomSong();
          this.isPlaying = true;
        }
      },
      
      // Khởi tạo
      init: function() {
        // Xác định trạng thái dựa trên ngữ cảnh truy cập
        if (this.isFirstVisit()) {
          this.handleFirstVisit();
        } else if (this.isPageReload()) {
          this.handlePageReload();
        } else {
          this.handlePageNavigation();
        }
        
        // Thiết lập nguồn nhạc
        this.audioElement.src = this.songs[this.currentIndex].src;
        
        // Xử lý khi bài hát kết thúc
        this.audioElement.addEventListener('ended', () => this.next());
        
        // Thiết lập Swup hooks
        this.setupSwupHooks();
        
        // Phát nhạc nếu đang ở trạng thái phát
        if (this.isPlaying) {
          setTimeout(() => this.play(), 500);
        }
      },
      
      // Thiết lập Swup hooks
      setupSwupHooks: function() {
        if (window.swup) {
          this.swupEnabled = true;
          
          // Trước khi chuyển trang: lưu trạng thái
          window.swup.hooks.on('visit:start', () => this.saveState());
          
          // Sau khi hoàn thành chuyển trang: cập nhật UI
          window.swup.hooks.on('visit:end', () => {
            setTimeout(() => this.updateAllUI(), 300);
          });
        } else {
          // Bắt sự kiện khi Swup được kích hoạt
          document.addEventListener('swup:enable', () => {
            this.swupEnabled = true;
            
            window.swup.hooks.on('visit:start', () => this.saveState());
            
            window.swup.hooks.on('visit:end', () => {
              setTimeout(() => this.updateAllUI(), 300);
            });
          });
        }
      },
      
      // Phát/tạm dừng nhạc
      togglePlay: function() {
        this.isPlaying ? this.pause() : this.play();
      },
      
      // Phát nhạc
      play: function() {
        const playPromise = this.audioElement.play();
        if (playPromise !== undefined) {
          playPromise
            .then(() => {
              this.isPlaying = true;
              this.saveState();
              this.updateAllUI();
            })
            .catch((error) => {
              console.log("Không thể phát nhạc tự động, có thể cần tương tác người dùng", error);
              this.isPlaying = false;
              this.saveState();
              this.updateAllUI();
            });
        }
      },
      
      // Tạm dừng nhạc
      pause: function() {
        this.audioElement.pause();
        this.isPlaying = false;
        this.saveState();
        this.updateAllUI();
      },
      
      // Chuyển bài tiếp theo
      next: function() {
        this.currentIndex = this.getRandomSong();
        this.audioElement.src = this.songs[this.currentIndex].src;
        this.play();
      },
      
      // Lưu trạng thái
      saveState: function() {
        try {
          // Lưu vào sessionStorage - chỉ cho tab hiện tại
          const state = {
            index: this.currentIndex,
            isPlaying: this.isPlaying,
            tabId: this.tabId
          };
          sessionStorage.setItem('music-state', JSON.stringify(state));
          
          // Lưu vào localStorage cho reload trang
          localStorage.setItem('music-index', this.currentIndex.toString());
          localStorage.setItem('music-is-playing', this.isPlaying.toString());
        } catch (e) {
          console.error('Lỗi khi lưu trạng thái nhạc:', e);
        }
      },
      
      // Cập nhật UI
      updateAllUI: function() {
        try {
          const allBtns = document.querySelectorAll('[id="music-play-btn"]');
          const allIcons = document.querySelectorAll('[id="music-icon"]');
          
          // Cập nhật nút
          allBtns.forEach(btn => {
            btn.classList.toggle('music-vibrate', this.isPlaying);
            btn.setAttribute('title', this.isPlaying ? 'Tạm dừng nhạc' : 'Phát nhạc');
          });
          
          // Cập nhật biểu tượng
          allIcons.forEach(icon => {
            icon.classList.toggle('animate-spin-slow', this.isPlaying);
            
            if (this.isPlaying && icon.classList.contains('fa6-solid:play')) {
              icon.classList.replace('fa6-solid:play', 'fa6-solid:pause');
            } else if (!this.isPlaying && icon.classList.contains('fa6-solid:pause')) {
              icon.classList.replace('fa6-solid:pause', 'fa6-solid:play');
            }
          });
        } catch (e) {
          console.error('Lỗi khi cập nhật UI trình phát nhạc:', e);
        }
      }
    };
    
    // Khởi tạo player khi tạo lần đầu
    window.musicPlayer.init();
    
    // Xử lý khi đóng tab
    window.addEventListener('beforeunload', () => {
      // Chỉ xóa sessionStorage khi đóng tab
      sessionStorage.removeItem('music-state');
      sessionStorage.removeItem('current-tab-id');
      
      // Không xóa localStorage khi reload, để giữ trạng thái
    });
  }
  
  // Xử lý sự kiện cho từng instance của button
  (function() {
    const btn = document.getElementById('music-play-btn');
    const icon = document.getElementById('music-icon');
    const audio = document.getElementById('profile-music');
    
    if (!btn || !icon || !audio) return;
    
    // Đồng bộ UI ban đầu - Đảm bảo UI phản ánh đúng trạng thái nhạc
    if (window.musicPlayer.isPlaying) {
      // Đảm bảo icon đúng trạng thái
      if (icon.classList.contains('fa6-solid:play')) {
        icon.classList.replace('fa6-solid:play', 'fa6-solid:pause');
      }
      icon.classList.add('animate-spin-slow');
      btn.classList.add('music-vibrate');
    } else {
      // Đảm bảo icon đúng trạng thái
      if (icon.classList.contains('fa6-solid:pause')) {
        icon.classList.replace('fa6-solid:pause', 'fa6-solid:play');
      }
      icon.classList.remove('animate-spin-slow');
      btn.classList.remove('music-vibrate');
    }
    
    // Xử lý sự kiện click với biện pháp đặc biệt
    btn.onclick = function() {
      window.musicPlayer.togglePlay();
      return false;
    };
  })();
</script>

<style>
  .animate-spin-slow {
    animation: spin 2s linear infinite;
  }
  @keyframes spin {
    100% { transform: rotate(360deg); }
  }
  /* Hiệu ứng rung nhẹ khi đang phát */
  .music-vibrate {
    animation: vibrate 0.25s linear infinite both;
  }
  @keyframes vibrate {
    0% { transform: scale(1) rotate(-2deg); }
    20% { transform: scale(1.05) rotate(2deg); }
    40% { transform: scale(1.1) rotate(-2deg); }
    60% { transform: scale(1.05) rotate(2deg); }
    80% { transform: scale(1) rotate(-2deg); }
    100% { transform: scale(1) rotate(0); }
  }
</style>

